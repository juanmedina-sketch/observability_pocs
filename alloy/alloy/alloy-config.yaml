

# Configuracion de metricas del sistema
# otra forma de configurar prometheus: "yo escrappeo demo-echo y node-exporter y se las mando a prometheus"
# metrics:
#   global:
#     scrape_interval: 15s
#     external_labels:
#       cluster: pro-monitor
#       __replica__: replica-0
#   configs:
#     - name: default
#       scrape_configs:
#         # metricas de la aplicacion demo-echo
#         - job_name: demo-echo
#           static_configs:
#             - targets: ['demo-echo:3000']
#               labels:
#                 job: demo-echo
#                 service: web-app

#         # metricas del sistema
#         - job_name: node-exporter
#           static_configs:
#             - targets: ['node-exporter:9100']
#               labels:
#                 job: node-exporter
#                 service: system-metrics

#       remote_write:
#         - url: http://prometheus:9090/api/v1/write

server:
  log_level: info

logs:
  configs:
    - name: default
      positions:
        filename: /tmp/positions-demo.yaml

      clients:
        - url: http://grafana-loki:3100/loki/api/v1/push
          external_labels:
            environment: production

      scrape_configs:
        - job_name: docker-logs
          static_configs:
            - targets: [localhost]
              labels:
                job: docker-logs
                __path__: /var/lib/docker/containers/*/*-json.log
          pipeline_stages:
            - json:
                expressions:
                  stream: stream
                  time: time
                  message: log
            - timestamp:
                source: time
                format: RFC3339Nano
            - labels:
                stream:
            - output:
                source: message

        - job_name: echo-app-logs
          static_configs:
            - targets: [localhost]
              labels:
                job: echo-app-logs
                service: web-app
                __path__: /var/lib/docker/containers/*/*-json.log
          pipeline_stages:
            - docker: {}
            - match:
                selector: '{container_name=~".*demo-echo.*"}'
                action: keep
                stages:
                  - json:
                      expressions:
                        stream: stream
                        time: time
                        message: log
                  - timestamp:
                      source: time
                      format: RFC3339Nano
                  - output:
                      source: message
                  - json:
                      expressions:
                        level: level
                        requestId: requestId
                        msg: message
                  - labels:
                      level:
                      requestId:
